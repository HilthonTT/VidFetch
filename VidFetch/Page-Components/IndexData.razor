@typeparam TData

@inject IVideoLibrary videoLibrary
@inject ILoadedItemsCache loadedItemsCache
@inject ISettingsData settingsData
@inject IYoutube youtube
@inject ISearchHelper<TData> searchHelper
@inject IGenericGeneralHelper<TData> generalHelper
@inject IVideoLibraryFilterHelper<TData> filterHelper
@inject ITokenHelper tokenHelper
@inject IFolderHelper folderHelper
@inject ISnackbarHelper snackbarHelper
@inject ILanguageExtension languageExtension
@inject IClipboard clipboard

<MudGrid Spacing="5">
    <MudItem xs="12" Class="text-center">
        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudFab OnClick="LoadData"
                    Color="Color.Primary" 
                    StartIcon="@Icons.Material.Filled.Link"
                    Label="@GetDictionary()[KeyWords.PasteALink]" />
            @if (_downloadTokenSource is null && IsVideoModel())
            {
                <MudFab OnClick="DownloadAllVideos"
                        Color="Color.Success"
                        StartIcon="@Icons.Material.Filled.Download"
                        Label="@GetDownloadText()" />
            }
            else if (_downloadTokenSource is not null && IsVideoModel())
            {
                <MudFab OnClick="CancelVideosDownload"
                        Color="Color.Error"
                        StartIcon="@Icons.Material.Filled.Cancel"
                        Label="@GetDictionary()[KeyWords.Cancel]" />
            }
            @if (IsVideoModel())
            {
                <MudFab OnClick="OpenFileLocation"
                        Color="Color.Warning"
                        StartIcon="@Icons.Material.Filled.Folder"
                        Label="@GetDictionary()[KeyWords.OpenFolderLocation]" />
            }
            <MudFab OnClick="SaveData"
                    Color="Color.Success"
                    StartIcon="@Icons.Material.Filled.Save"
                    Label="@GetSaveButtonText()" />
            <MudFab OnClick="ClearDatas"
                    Color="Color.Error"
                    StartIcon="@Icons.Material.Filled.Delete"
                    Label="@GetClearButtonText()" />
        </MudStack>
    </MudItem>
</MudGrid>
<MudGrid Spacing="5" Class="mb-12">
    <MudItem xs="12">
        <div class="w-100">
            <MudAutocomplete T="string"
                             Label="@GetSearchBarText()"
                             Variant="Variant.Outlined"
                             AdornmentIcon="@Icons.Material.Filled.YoutubeSearchedFor"
                             OnAdornmentClick="FilterData"
                             SearchFunc="FilterSearchData"
                             ResetValueOnEmptyText="true"
                             ValueChanged="HandleSearchValueChanged" 
                             Culture="GetCulture()"/>
        </div>
        @if (_visibleData?.Count > 0 || GetDataResults()?.Count > 0)
        {
            <MudDivider Class="mb-6 mt-6"></MudDivider>
            @if (string.IsNullOrWhiteSpace(_downloadingVideoText) is false)
            {
                <MudAlert Class="mb-4" Severity="Severity.Warning">@_downloadingVideoText</MudAlert>
            }
            <MudGrid>
                @if (typeof(TData) == typeof(VideoModel))
                {
                    <MudVirtualize Items="GetVideos()" Context="v" OverscanCount="ItemsPerPage">
                        <VideoComponent @key="v.VideoId"
                                        Video="v"
                                        CardSize="4"
                                        RemoveEvent="(() => RemoveData((TData)(dynamic)v))" />
                    </MudVirtualize>
                }
                else if (typeof(TData) == typeof(ChannelModel))
                {
                    <MudVirtualize Items="GetChannels()" Context="c" OverscanCount="ItemsPerPage">
                        <ChannelComponent @key="c.ChannelId"
                                          Channel="c"
                                          CardSize="4"
                                          RemoveEvent="(() => RemoveData((TData)(dynamic)c))" />
                    </MudVirtualize>
                }
                else
                {
                    <MudVirtualize Items="GetPlaylists()" Context="p" OverscanCount="ItemsPerPage">
                        <PlaylistComponent @key="p.PlaylistId"
                                           Playlist="p"
                                           CardSize="4"
                                           RemoveEvent="(() => RemoveData((TData)(dynamic)p))" />
                    </MudVirtualize>
                }
            </MudGrid>
            @if (_loadedItems < GetDataResults()?.Count)
            {
                <div class="text-center mt-4">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                    @onclick="LoadMoreData">
                        @GetDictionary()[KeyWords.LoadMore]
                    </MudButton>
                </div>
            }
        }
    </MudItem>
</MudGrid>


<MudAppBar Bottom="true" Fixed="true" Color="Color.Dark" Elevation="1">
    <MudText Class="mx-5">@GetProgressText()</MudText>
    <MudProgressLinear Color="Color.Primary"
                       Striped="true"
                       Size="Size.Medium"
                       Max="1"
                       Value="@_progress"
                       Class="my-7"
                       Buffer="true"
                       Rounded="true" />
</MudAppBar>