@page "/Playlist/{Url}"
@inject IYoutube youtube
@inject IPlaylistData playlistData
@inject ISnackbar snackbar
@inject ILauncher launcher

@code {
    [Parameter]
    public string Url { get; set; }

    private PlaylistModel _playlist = new();
    private List<VideoModel> _videos = new();
    private bool _isSaved = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadNullData();
    }

    private async Task LoadData()
    {
        _playlist = await youtube.GetPlaylistAsync(Url);
        if (_playlist is not null)
        {
            _isSaved = await playlistData.PlaylistExistsAsync(_playlist.Url, _playlist.PlaylistId);
        }

        _videos = await youtube.GetPlayListVideosAsync(Url);
    }

    private async Task LoadNullData()
    {
        bool isThumbnailEmpty = string.IsNullOrWhiteSpace(_playlist.ThumbnailUrl);
        bool isAuthorThumbnailEmpty = string.IsNullOrWhiteSpace(_playlist.AuthorThumbnailUrl);
        string defaultUrl = "https://dummyimage.com/1200x900/000/ffffff&text=No+image+available.";
        if (isThumbnailEmpty)
        {
            var p = await youtube.GetPlaylistAsync(_playlist.Url);
            string playlistThumbnail = string.IsNullOrWhiteSpace(p.ThumbnailUrl) ? defaultUrl : p.ThumbnailUrl;
            _playlist.ThumbnailUrl = playlistThumbnail;
        }

        if (isAuthorThumbnailEmpty)
        {
            var channel = await youtube.GetChannelAsync(_playlist.AuthorUrl);
            string channelThumbnail = string.IsNullOrWhiteSpace(channel.ThumbnailUrl) ? defaultUrl : channel.ThumbnailUrl;
            _playlist.AuthorThumbnailUrl = channelThumbnail;
        }
    }

    private async Task SavePlaylist()
    {
        if (_isSaved is false)
        {
            await playlistData.SetPlaylistAsync(_playlist.Url, _playlist.PlaylistId);
            snackbar.Add($"Successfully saved {_playlist.Title}");
            _isSaved = true;
        }
    }

    private async Task DeletePlaylist()
    {
        if (_isSaved)
        {
            await playlistData.DeletePlaylistAsync(_playlist);
            snackbar.Add($"Successfully deleted {_playlist.Title}");
            _isSaved = false;
        }
    }

    private async Task OpenUrl(string text)
    {
        await launcher.OpenAsync(text);
    }
}
