@page "/Channel/{Url}"
@inject IYoutube youtube
@inject IChannelData channelData
@inject ISnackbar snackbar
@inject ILauncher launcher

@code {
    [Parameter]
    public string Url { get; set; }

    private ChannelModel _channel = new();
    private List<VideoModel> _videos = new();
    private bool _isSaved = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadNullData();
    }

    private async Task LoadData()
    {
        _channel = await youtube.GetChannelAsync(Url);
        if (_channel is not null)
        {
            _isSaved = await channelData.ChannelExistsAsync(_channel.Url, _channel.ChannelId);
        }

        _videos = await youtube.GetChannelVideosAsync(Url);
    }

    private async Task LoadNullData()
    {
        bool isThumbnailEmpty = string.IsNullOrWhiteSpace(_channel.ThumbnailUrl);
        if (isThumbnailEmpty)
        {
            string defaultUrl = "https://dummyimage.com/1200x900/000/ffffff&text=No+image+available.";
            var c = await youtube.GetChannelAsync(_channel.Url);
            string channelThumbnail = string.IsNullOrWhiteSpace(c.ThumbnailUrl) ? defaultUrl : _channel.ThumbnailUrl;
            _channel.ThumbnailUrl = channelThumbnail;
        }
    }

    private async Task SaveChannel()
    {
        if (_isSaved is false)
        {
            await channelData.SetChannelAsync(_channel.Url, _channel.ChannelId);
            snackbar.Add($"Successfully saved {_channel.Title}");
            _isSaved = true;
        }
    }

    private async Task DeleteChannel()
    {
        if (_isSaved)
        {
            await channelData.DeleteChannelAsync(_channel);
            snackbar.Add($"Successfully deleted {_channel.Title}");
            _isSaved = false;
        }
    }

    private async Task OpenUrl(string text)
    {
        await launcher.OpenAsync(text);
    }
}
