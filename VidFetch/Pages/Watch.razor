@page "/Watch/{Url}"
@inject IYoutubeDownloader youtubeDownloader

<MudCard>
    <div class="text-center">
        <iframe class="w-100" style="height: 600px;" src="@SourcePath" allowfullscreen />
    </div>
    <MudCardContent>
        <MudText Typo="Typo.h5">@Video?.Title</MudText>
        <MudText Typo="Typo.body2">@Video?.Author</MudText>
        <MudText Typo="Typo.body2">Uploaded: @Video?.UploadDate</MudText>
        <MudDivider Class="mt-5 mb-5"/>
        <MudText Typo="Typo.body2">
           @(
            (MarkupString)FormatDescription()
           )
        </MudText>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public string Url { get; set; }

    public string SourcePath { get; set; }
    public Video Video { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Video = await youtubeDownloader.GetVideoAsync(Url);
        SourcePath = $"https://www.youtube.com/embed/{Video.Id}";
    }

    private string FormatDescription()
    {
        if (Video is not null)
        {
            string description = "";
            description = Regex.Replace(Video.Description, @"(https?://[^\s]+)", "<a href=\"$1\">$1</a>");

            // Split the description into separate lines
            string[] lines = description.Split('\n');

            // Add bullet points to each line
            for (int i = 0; i < lines.Length; i++)
            {
                lines[i] = "• " + lines[i].Trim();
            }

            // Join the lines back together with line breaks
            string formattedDescription = string.Join("<br>", lines);

            return formattedDescription;
        }

        return "";
    }
}
