@page "/Search"
@inject IYoutube youtube
@inject ISecureStorage secureStorage
@inject IDefaultData defaultData
@inject IVideoLibrary videoLibrary
@inject ISettingsLibrary settingsLibrary
@inject ISnackbar snackbar
@inject ISearchHelper searchHelper
@inject IFolderHelper folderHelper
@inject ITokenHelper tokenHelper

<MudText Typo="Typo.h4" Class="text-center text-uppercase mb-4">
    Search
    <MudIcon Icon="@Icons.Custom.Brands.YouTube" Title="Search"></MudIcon>
</MudText>
@if (string.IsNullOrWhiteSpace(errorMessage) is false)
{
    <MudAlert Severity="Severity.Error" Class="mb-4">
        @errorMessage
    </MudAlert>
}

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Centered="true">
    <MudTabPanel Text="Video">
        <MudGrid Spacing="5">
            <MudItem xs="12" Class="text-center">
                <MudTextField @bind-Value="videoSearchText"
                              Class="mb-4"
                              Label="Input the video's title"
                              HelperText="This is where you input video's title."
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Download"
                              OnAdornmentClick="SearchVideos"
                              Required="true"
                              Clearable="true" />
                <MudButtonGroup Class="mt-2">
                    @foreach (var p in downloadPaths)
                    {
                        <MudButton Class="@GetButtonClass(p)"
                                   OnClick="(() => OnButtonClick(p))">
                            @p
                        </MudButton>
                    }
                </MudButtonGroup>
                <MudSelect Label="Video Format:"
                @bind-Value="selectedExtension"
                           Class="mud-input-root text-start"
                           HelperText="Pick your preferred format.">
                    @foreach (var e in videoExtensions)
                    {
                        <MudSelectItem Value="@e" OnClick="SaveStates">@e</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Class="mt-4 w-100"
                           Color="Color.Warning"
                           Variant="Variant.Outlined"
                @onclick="OpenFileLocation">
                    Open Folder Location
                </MudButton>
            </MudItem>
        </MudGrid>
        <MudGrid Spacing="5">
            <MudItem xs="12">
                <MudAutocomplete T="string" Label="@GetVideoSearchBarText()"
                                 Variant="Variant.Outlined"
                                 Class="mb-4"
                                 HelperText="Search the loaded videos."
                                 AdornmentIcon="@Icons.Material.Filled.YoutubeSearchedFor"
                                 OnAdornmentClick="FilterVideos"
                                 SearchFunc="FilterSearchVideos"
                                 ResetValueOnEmptyText="true" />
                @if (videoTokenSource is not null)
                {
                    <MudButton Color="Color.Error"
                               Variant="Variant.Filled"
                               Class="w-100 mb-4"
                    @onclick="CancelVideoSearch">
                        Cancel Video Search
                    </MudButton>
                }
                <MudGrid>
                    <MudVirtualize Items="videoLibrary.VideoResults" Context="v" OverscanCount="10">
                        <VideoComponent @key="v.Id"
                                        Video="new VideoModel(v)"
                                        CardSize="6"
                                        SelectedExtension="@selectedExtension"
                                        SelectedPath="@selectedPath"
                                        RemoveEvent="(() => RemoveVideo(v))" />
                    </MudVirtualize>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="Channel">
        <MudGrid Spacing="5">
            <MudItem xs="12" Class="text-center">
                <MudTextField @bind-Value="channelSearchText"
                              Class="mb-4"
                              Label="Input the channel's title"
                              HelperText="This is where you input the channel's title."
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Download"
                              OnAdornmentClick="SearchChannels"
                              Required="true"
                              Clearable="true" />
            </MudItem>
        </MudGrid>
        <MudGrid Spacing="5">
            <MudItem xs="12">
                <MudAutocomplete T="string" Label="@GetChannelSearchBarText()"
                                 Variant="Variant.Outlined"
                                 Class="mb-4"
                                 HelperText="Search the loaded channels"
                                 AdornmentIcon="@Icons.Material.Filled.YoutubeSearchedFor"
                                 OnAdornmentClick="FilterChannels"
                                 SearchFunc="FilterSearchChannels"
                                 ResetValueOnEmptyText="true" />
                @if (channelTokenSource is not null)
                {
                    <MudButton Color="Color.Error"
                               Variant="Variant.Filled"
                               Class="w-100 mb-4"
                    @onclick="CancelChannelSearch">
                        Cancel Channel Search
                    </MudButton>
                }
                <MudGrid>
                    <MudVirtualize Items="videoLibrary.ChannelResults" Context="c" OverscanCount="10">
                        <ChannelComponent @key="c.Id"
                                          Channel="new ChannelModel(c)"
                                          CardSize="6"
                                          SelectedExtension="@selectedExtension"
                                          SelectedPath="@selectedPath"
                                          RemoveEvent="(() => RemoveChannel(c))" />
                    </MudVirtualize>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="Playlist">
        <MudGrid Spacing="5">
            <MudItem xs="12" Class="text-center">
                <MudTextField @bind-Value="playlistSearchText"
                              Class="mb-4"
                              Label="Input the playlist's title"
                              HelperText="This is where you input the playlist's title."
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Download"
                              OnAdornmentClick="SearchPlaylists"
                              Required="true"
                              Clearable="true" />
            </MudItem>
        </MudGrid>
        <MudGrid Spacing="5">
            <MudItem xs="12">
                <MudAutocomplete T="string" Label="@GetPlaylistSearchBarText()"
                                 Variant="Variant.Outlined"
                                 Class="mb-4"
                                 HelperText="Search the loaded playlists"
                                 AdornmentIcon="@Icons.Material.Filled.YoutubeSearchedFor"
                                 OnAdornmentClick="FilterPlaylists"
                                 SearchFunc="FilterSearchPlaylists"
                                 ResetValueOnEmptyText="true" />
                @if (playlistTokenSource is not null)
                {
                    <MudButton Color="Color.Error"
                               Variant="Variant.Filled"
                               Class="w-100 mb-4"
                    @onclick="CancelPlaylistSearch">
                        Cancel Playlist Search
                    </MudButton>
                }
                <MudGrid>
                    <MudVirtualize Items="videoLibrary.PlaylistResults" Context="p" OverscanCount="10">
                        <PlaylistComponent @key="p.Id"
                                           Playlist="new PlaylistModel(p)"
                                           CardSize="6"
                                           SelectedExtension="@selectedExtension"
                                           SelectedPath="@selectedPath"
                                           RemoveEvent="(() => RemovePlaylist(p))" />
                    </MudVirtualize>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>


@code {
    private const string DefaultDownloadPath = "Download Folder";
    private const string DefaultExtension = ".mp4";
    private CancellationTokenSource videoTokenSource;
    private CancellationTokenSource channelTokenSource;
    private CancellationTokenSource playlistTokenSource;
    private List<string> downloadPaths = new();
    private List<string> videoExtensions = new();
    private string selectedPath = DefaultDownloadPath;
    private string selectedExtension = DefaultExtension;
    private string errorMessage = "";
    private string videoSearchText = "";
    private string playlistSearchText = "";
    private string channelSearchText = "";

    protected override async Task OnInitializedAsync()
    {
        LoadPathsAndExtensions();
        await LoadStates();
    }

    private void LoadPathsAndExtensions()
    {
        downloadPaths = defaultData.GetDownloadPaths();
        videoExtensions = defaultData.GetVideoExtensions();
    }

    private async Task LoadStates()
    {
        selectedPath = await secureStorage.GetAsync(nameof(selectedPath)) ?? DefaultDownloadPath;
        selectedExtension = await secureStorage.GetAsync(nameof(selectedExtension)) ?? DefaultExtension;
    }

    private async Task SaveStates()
    {
        await secureStorage.SetAsync(nameof(selectedPath), selectedPath);
        await secureStorage.SetAsync(nameof(selectedExtension), selectedExtension);
    }

    private async Task SearchVideos()
    {
        if (string.IsNullOrWhiteSpace(videoSearchText) is false)
        {
            var token = tokenHelper.InitializeToken(ref videoTokenSource);

            videoLibrary.VideoResults = await youtube.GetVideosBySearchAsync(videoSearchText, token);
            CancelVideoSearch();
        }
    }

    private async Task SearchPlaylists()
    {
        if (string.IsNullOrWhiteSpace(playlistSearchText) is false)
        {
            var token = tokenHelper.InitializeToken(ref playlistTokenSource);

            videoLibrary.PlaylistResults = await youtube.GetPlaylistsBySearchAsync(playlistSearchText, token);
            CancelPlaylistSearch();
        }
    }

    private async Task SearchChannels()
    {
        if (string.IsNullOrWhiteSpace(channelSearchText) is false)
        {
            var token = tokenHelper.InitializeToken(ref channelTokenSource);

            videoLibrary.ChannelResults = await youtube.GetChannelBySearchAsync(channelSearchText, token);
            CancelChannelSearch();
        }
    }

    private async Task OpenFileLocation()
    {
        if (string.IsNullOrWhiteSpace(selectedPath))
        {
            return;
        }

        await folderHelper.OpenFolderLocationAsync(selectedPath);
    }

    private async Task OnButtonClick(string path)
    {
        selectedPath = path;
        await SaveStates();
    }

    private async Task<IEnumerable<string>> FilterSearchVideos(string searchInput)
    {
        return await searchHelper.SearchAsync(videoLibrary.VideoResults, searchInput);
    }

    private async Task<IEnumerable<string>> FilterSearchChannels(string searchInput)
    {
        return await searchHelper.SearchAsync(videoLibrary.ChannelResults, searchInput);
    }

    private async Task<IEnumerable<string>> FilterSearchPlaylists(string searchInput)
    {
        return await searchHelper.SearchAsync(videoLibrary.PlaylistResults, searchInput);
    }

    private void FilterVideos()
    {
        videoLibrary.VideoResults = searchHelper.FilterList(videoLibrary.VideoResults, videoSearchText);
    }

    private void FilterChannels()
    {
        videoLibrary.ChannelResults = searchHelper.FilterList(videoLibrary.ChannelResults, channelSearchText);
    }

    private void FilterPlaylists()
    {
        videoLibrary.PlaylistResults = searchHelper.FilterList(videoLibrary.PlaylistResults, playlistSearchText);
    }

    private void RemoveVideo(VideoSearchResult video)
    {
        videoLibrary.VideoResults.Remove(video);
    }

    private void RemoveChannel(ChannelSearchResult channel)
    {
        videoLibrary.ChannelResults.Remove(channel);
    }

    private void RemovePlaylist(PlaylistSearchResult playlist)
    {
        videoLibrary.PlaylistResults.Remove(playlist);
    }

    private void CancelVideoSearch()
    {
        tokenHelper.CancelRequest(ref videoTokenSource);
    }

    private void CancelChannelSearch()
    {
        tokenHelper.CancelRequest(ref channelTokenSource);
    }

    private void CancelPlaylistSearch()
    {
        tokenHelper.CancelRequest(ref playlistTokenSource);
    }

    private string GetButtonClass(string path)
    {
        if (selectedPath == path)
        {
            return "text-success";
        }

        return "text-danger";
    }

    private string GetVideoSearchBarText()
    {
        if (videoLibrary.VideoResults?.Count <= 0)
        {
            return "Search Video";
        }

        if (videoLibrary.VideoResults?.Count == 1)
        {
            return "Search 1 Video";
        }

        return $"Search {videoLibrary.VideoResults?.Count} Videos";
    }

    private string GetChannelSearchBarText()
    {
        if (videoLibrary.ChannelResults?.Count <= 0)
        {
            return "Search Channel";
        }

        if (videoLibrary.ChannelResults?.Count == 1)
        {
            return "Search 1 Channel";
        }

        return $"Search {videoLibrary.ChannelResults?.Count} Videos";
    }

    private string GetPlaylistSearchBarText()
    {
        if (videoLibrary.PlaylistResults?.Count <= 0)
        {
            return "Search Playlist";
        }

        if (videoLibrary.PlaylistResults?.Count == 1)
        {
            return "Search 1 Playlist";
        }

        return $"Search {videoLibrary.PlaylistResults?.Count} Playlists";
    }
}
