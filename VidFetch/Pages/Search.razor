@page "/Search"
@inject IYoutube youtube
@inject ISecureStorage secureStorage
@inject IDefaultData defaultData
@inject ISettingsLibrary settingsLibrary
@inject ISnackbar snackbar
@inject ISearchHelper searchHelper
@inject IFolderHelper folderHelper
@inject ITokenHelper tokenHelper
@inject IVideo videoData

@code {
    private const string DefaultDownloadPath = "Download Folder";
    private const string DefaultExtension = ".mp4";
    private List<string> downloadPaths = new();
    private List<string> videoExtensions = new();
    private List<VideoSearchResult> videoResults = new();
    private List<ChannelSearchResult> channelResults = new();
    private List<PlaylistSearchResult> playlistResults = new();
    private string selectedPath = DefaultDownloadPath;
    private string selectedExtension = DefaultExtension;
    private string errorMessage = "";
    private string videoSearchText = "";
    private string playlistSearchText = "";
    private string channelSearchText = "";

    protected override async Task OnInitializedAsync()
    {
        LoadPathsAndExtensions();
        await LoadStates();
    }

    private void LoadPathsAndExtensions()
    {
        downloadPaths = defaultData.GetDownloadPaths();
        videoExtensions = defaultData.GetVideoExtensions();
    }

    private async Task LoadStates()
    {
        selectedPath = await secureStorage.GetAsync(nameof(selectedPath)) ?? DefaultDownloadPath;
        selectedExtension = await secureStorage.GetAsync(nameof(selectedExtension)) ?? DefaultExtension;
    }

    private async Task SaveStates()
    {
        await secureStorage.SetAsync(nameof(selectedPath), selectedPath);
        await secureStorage.SetAsync(nameof(selectedExtension), selectedExtension);
    }

    private async Task SearchVideos()
    {
        if (string.IsNullOrWhiteSpace(videoSearchText) is false)
        {
            videoResults = await youtube.GetVideosBySearchAsync(videoSearchText);
        }
    }

    private async Task SearchPlaylists()
    {
        if (string.IsNullOrWhiteSpace(playlistSearchText) is false)
        {
            channelResults = await youtube.GetChannelBySearchAsync(playlistSearchText);
        }
    }

    private async Task OpenFileLocation()
    {
        if (string.IsNullOrWhiteSpace(selectedPath))
        {
            return;
        }

        await folderHelper.OpenFolderLocationAsync(selectedPath);
    }
}
