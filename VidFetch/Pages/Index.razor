@page "/"
@inject IYoutubeDownloader youtubeDownloader
@inject ISecureStorage secureStorage
@inject IDefaultData defaultData
@inject NavigationManager navManager

<MudContainer>
    <MudText Typo="Typo.h4" Class="text-center text-uppercase mb-4">
        Vid Fetch
        <MudIcon Icon="@Icons.Material.Filled.MusicVideo" Title="Video"></MudIcon>
    </MudText>
    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
    {
        <MudAlert Severity="Severity.Error">
            @errorMessage
        </MudAlert>
    }
    <MudGrid>
        <MudItem xs="12" Class="text-center">
            <MudTextField @bind-Value="youtubeUrl"
                          Label="Enter YouTube URL"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Download"
                          AdornmentColor="Color.Secondary"
                          OnAdornmentClick="LoadVideoOrPlaylist"
                          Required="true"
                          Clearable="true" />

            <MudButtonGroup Class="mt-2">
                @foreach (var p in downloadPaths)
                {
                    <MudButton Class="@GetButtonClass(p)"
                               OnClick="(() => selectedPath = p)">
                        @p
                    </MudButton>
                }
            </MudButtonGroup>
            <MudSelect Label="Video Format:" @bind-Value="selectedExtension" Class="mud-input-root text-start">
                @foreach (var e in videoExtensions)
                {
                    <MudSelectItem Value="@e">@e</MudSelectItem>
                }
            </MudSelect>
            <div class="d-flex justify-content-between align-items-start mt-5 mb-5">
                <div>
                    @if (playlistVideos?.Count > 0)
                    {
                        <div class="text-start">
                            <MudSwitch @bind-Checked="downloadAll"
                                       Color="Color.Primary"
                                       Label="Download Entire Playlist" />
                        </div>
                    }
                </div>
                <div>
                    <MudButtonGroup OverrideStyles="false">
                        @if (video is not null)
                        {
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                            @onclick="DownloadVideo">
                                Download Video
                            </MudButton>
                        }
                        @if (playlistVideos?.Count > 0)
                        {
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Warning"
                            @onclick="StartDownload">
                                @((downloadAll ? "Download Playlist" : $"Download index: {videoIndex}"))
                            </MudButton>
                        }
                        @if (cancellationSource is not null)
                        {
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                            @onclick="CancelDownload">
                                Cancel
                            </MudButton>
                        }
                    </MudButtonGroup>
                </div>
            </div>

            @if (downloadAll is false)
            {
                <MudNumericField @bind-Value="videoIndex"
                                 Label="Enter video index"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 ErrorText="@errorMessage"
                                 Min="1"
                                 Max="playlistVideos.Count" />
            }

            @if (video is not null)
            {
                <MudText Typo="Typo.h5"
                         Class="text-uppercase text-start"
                         Color="Color.Warning">
                    Video
                </MudText>
                <MudCard Class="mb-4">
                    <MudCardMedia Image="@video.Thumbnails.FirstOrDefault().Url" Height="200"></MudCardMedia>
                    <MudCardHeader>
                        <MudText Typo="Typo.subtitle1">@video.Title</MudText>
                    </MudCardHeader>
                    <MudDivider />
                    <MudCardContent Class="text-start">
                        <div>@video.Author</div>
                        <div>@video.Duration</div>
                        <div>@video.Url</div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="DownloadVideo">
                            Download
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="(() => LoadWatchPage(video.Url))">
                            Watch
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            }
            <MudDivider />
            @if (playlistVideos?.Count > 0)
            {
                <MudText Typo="Typo.h5"
                         Class="text-uppercase text-start mt-2"
                         Color="Color.Warning">
                    Playlist
                </MudText>
            }
            <MudVirtualize Items="playlistVideos" Context="v" OverscanCount="10">
                <MudCard Class="mb-4">
                    <MudCardMedia Image="@v.Thumbnails.FirstOrDefault().Url" Height="200" />
                    <MudCardHeader>
                        <MudText Typo="Typo.subtitle1">@v.Title</MudText>
                    </MudCardHeader>
                    <MudDivider />
                    <MudCardContent Class="text-start">
                        <div>@v.Author</div>
                        <div>@v.Duration</div>
                        <div>@v.Url</div>
                        <div>Index: @GetIndex(v)</div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                        @onclick="(() => DownloadSelectedVideo(v))">
                            Download
                        </MudButton>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Secondary"
                        @onclick="(() => LoadWatchPage(v.Url))">
                            Watch
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudVirtualize>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private const string DefaultDownloadPath = "Download Folder";
    private const string DefaultExtension = ".mp4";

    private CancellationTokenSource cancellationSource;
    private List<string> downloadPaths = new();
    private List<string> videoExtensions = new();
    private Video video;
    private List<PlaylistVideo> playlistVideos = new();
    private string selectedPath = DefaultDownloadPath;
    private string selectedExtension = DefaultExtension;
    private string customPath = "";
    private string youtubeUrl = "";
    private string errorMessage = "";
    private int videoIndex = 1;
    private bool downloadAll = true;

    protected override async Task OnInitializedAsync()
    {
        downloadPaths = defaultData.GetDownloadPaths();
        videoExtensions = defaultData.GetVideoExtensions();
        await LoadStates();
    }

    private async Task LoadStates()
    {
        selectedPath = await secureStorage.GetAsync(nameof(selectedPath)) ?? DefaultDownloadPath;
        selectedExtension = await secureStorage.GetAsync(nameof(selectedExtension)) ?? DefaultExtension;
    }

    private async Task SaveStates()
    {
        await secureStorage.SetAsync(nameof(selectedPath), selectedPath);
        await secureStorage.SetAsync(nameof(selectedExtension), selectedExtension);
    }

    private async Task LoadVideoOrPlaylist()
    {
        try
        {
            errorMessage = "";
            if (youtubeUrl.Contains("list="))
            {
                playlistVideos = await youtubeDownloader.GetPlayListVideosAsync(youtubeUrl);
            }
            else
            {
                video = await youtubeDownloader.GetVideoAsync(youtubeUrl);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DownloadVideo()
    {
        try
        {
            errorMessage = "";
            string path = string.IsNullOrWhiteSpace(customPath) ? selectedPath : customPath;

            await youtubeDownloader.DownloadVideoAsync(youtubeUrl, path, selectedExtension);
            await SaveStates();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DownloadSelectedVideo(PlaylistVideo playlistVideo)
    {
        try
        {
            errorMessage = "";
            string path = string.IsNullOrWhiteSpace(customPath) ? selectedPath : customPath;

            await youtubeDownloader.DownloadSelectedVideoAsync(path, selectedExtension, playlistVideo);
            await SaveStates();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void CancelDownload()
    {
        cancellationSource?.Cancel();
        cancellationSource = null;
    }

    private async Task StartDownload()
    {
        try
        {
            errorMessage = "";
            cancellationSource = new CancellationTokenSource();
            CancellationToken cancellationToken = cancellationSource.Token;

            int index = downloadAll ? 0 : videoIndex;
            await youtubeDownloader.DownloadPlaylistAsync(youtubeUrl, selectedPath, selectedExtension, downloadAll, index, cancellationToken);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void OnClear()
    {
        errorMessage = "";
        if (playlistVideos is not null)
        {
            playlistVideos = null;
        }

        if (video is not null)
        {
            video = null;
        }
    }

    private void LoadWatchPage(string url)
    {
        string encodedUrl = Uri.EscapeDataString(url);
        navManager.NavigateTo($"/Watch/{encodedUrl}");
    }

    private string GetButtonClass(string path)
    {
        if (selectedPath == path)
        {
            return "text-success";
        }

        return "text-danger";
    }

    private int GetIndex(PlaylistVideo playlistVideo)
    {
        int index = playlistVideos.IndexOf(playlistVideo);
        return index + 1;
    }
}
