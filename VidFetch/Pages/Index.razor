@page "/"
@inject IYoutubeDownloader youtubeDownloader
@inject ISecureStorage secureStorage
@inject IDefaultData defaultData
@inject NavigationManager navManager

<MudContainer>
    <MudText Typo="Typo.h4" Class="text-center text-uppercase mb-4">
        Vid Fetch
        <MudIcon Icon="@Icons.Material.Filled.MusicVideo" Title="Video"></MudIcon>
    </MudText>
    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
    {
        <MudAlert Severity="Severity.Error">
            @errorMessage
        </MudAlert>
    }
    <MudGrid>
        <MudItem xs="12" Class="text-center">
            <MudTextField @bind-Value="youtubeUrl"
                          Label="Enter YouTube URL"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Download"
                          AdornmentColor="Color.Secondary"
                          OnAdornmentClick="LoadVideoOrPlaylist"
                          Required="true"
                          Clearable="true" />
            <MudButtonGroup Class="mt-2">
                @foreach (var p in downloadPaths)
                {
                    <MudButton Class="@GetButtonClass(p)"
                               OnClick="(() => selectedPath = p)">
                        @p
                    </MudButton>
                }
            </MudButtonGroup>
            <MudSelect Label="Video Format:" @bind-Value="selectedExtension" Class="mud-input-root text-start">
                @foreach (var e in videoExtensions)
                {
                    <MudSelectItem Value="@e">@e</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
    <MudGrid Spacing="5">
        <MudItem xs="6">
            @if (videoCancellationSource is null)
            {
                <MudButton 
                    Color="Color.Primary" 
                    Variant="Variant.Filled" 
                    Class="w-100 mb-4"
                    @onclick="DownloadAllVideos">
                    @GetDownloadVideoText()
                </MudButton>
            }
            else
            {
                <MudButton 
                    Color="Color.Error" 
                    Variant="Variant.Filled" 
                    Class="w-100 mb-4" 
                    @onclick="CancelVideosDownload">
                    Cancel
                </MudButton>
            }
            @if (videos?.Count > 0)
            {
                <MudButton Color="Color.Warning"
                           Variant="Variant.Filled"
                           Class="w-100 mb-4"
                @onclick="ClearVideos">
                    Clear Videos
                </MudButton>
            }
            <MudVirtualize Items="videos" Context="v" OverscanCount="10">
                <MudCard Class="mb-4">
                    <MudCardMedia Image="@v.Thumbnails.FirstOrDefault().Url" Height="200"></MudCardMedia>
                    <MudCardHeader>
                        <MudText Typo="Typo.subtitle1">@v.Title</MudText>
                    </MudCardHeader>
                    <MudDivider />
                    <MudCardContent Class="text-start">
                        <div>@v.Author</div>
                        <div>@v.Duration</div>
                        <div>@v.Url</div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                        @onclick="(() => DownloadVideo(v.Url))">
                            Download
                        </MudButton>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Secondary"
                        @onclick="(() => LoadWatchPage(v.Url))">
                            Watch
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudVirtualize>
        </MudItem>
        <MudItem xs="6">
            @if (playlistCancellationSource is not null)
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Error"
                           Class="w-100"
                @onclick="CancelPlaylistDownload">
                    Cancel
                </MudButton>
            }
            else
            {
                <MudButton Color="Color.Primary"
                            Variant="Variant.Filled"
                            Class="w-100 mb-4"
                @onclick="DownloadAllPlaylists">
                    Download Playlist
                </MudButton>
            }
            @if (playlistVideos?.Count > 0)
            {
                <MudButton Color="Color.Warning"
                           Variant="Variant.Filled"
                           Class="w-100 mb-4"
                @onclick="ClearPlaylist">
                    Clear Playlist
                </MudButton>
            }
            <MudVirtualize Items="playlistVideos" Context="v" OverscanCount="10">
                <MudCard Class="mb-4">
                    <MudCardMedia Image="@v.Thumbnails.FirstOrDefault().Url" Height="200" />
                    <MudCardHeader>
                        <MudText Typo="Typo.subtitle1">@v.Title</MudText>
                    </MudCardHeader>
                    <MudDivider />
                    <MudCardContent Class="text-start">
                        <div>@v.Author</div>
                        <div>@v.Duration</div>
                        <div>@v.Url</div>
                        <div>Index: @GetIndex(v)</div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                        @onclick="(() => DownloadVideo(v.Url))">
                            Download
                        </MudButton>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Secondary"
                        @onclick="(() => LoadWatchPage(v.Url))">
                            Watch
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudVirtualize>
        </MudItem>
    </MudGrid>

    <MudDialog IsVisible="showDialog" Class="backdrop-blur">
        <DialogContent>
            <p>
                It appears your URL is a playlist.
            </p>
            <p>
                Would you like to download your video's Url?
            </p>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Primary" OnClick="(() => DownloadVideo(youtubeUrl))">Download</MudButton>
            <MudButton OnClick="ToggleDialog">Cancel</MudButton>
        </DialogActions>
    </MudDialog>

</MudContainer>

@code {
    private const string DefaultDownloadPath = "Download Folder";
    private const string DefaultExtension = ".mp4";

    private CancellationTokenSource playlistCancellationSource;
    private CancellationTokenSource videoCancellationSource;
    private List<string> downloadPaths = new();
    private List<string> videoExtensions = new();
    private List<PlaylistVideo> playlistVideos = new();
    private List<Video> videos = new();
    private string selectedPath = DefaultDownloadPath;
    private string selectedExtension = DefaultExtension;
    private string customPath = "";
    private string youtubeUrl = "";
    private string errorMessage = "";
    private bool showDialog = false;

    protected override async Task OnInitializedAsync()
    {
        downloadPaths = defaultData.GetDownloadPaths();
        videoExtensions = defaultData.GetVideoExtensions();
        await LoadStates();
    }

    private async Task LoadStates()
    {
        selectedPath = await secureStorage.GetAsync(nameof(selectedPath)) ?? DefaultDownloadPath;
        selectedExtension = await secureStorage.GetAsync(nameof(selectedExtension)) ?? DefaultExtension;
    }

    private async Task SaveStates()
    {
        await secureStorage.SetAsync(nameof(selectedPath), selectedPath);
        await secureStorage.SetAsync(nameof(selectedExtension), selectedExtension);
    }

    private async Task LoadVideoOrPlaylist()
    {
        try
        {
            errorMessage = "";

            if (IsPlaylistUrl())
            {
                await LoadPlaylistVideos();
                showDialog = true;
            }
            else
            {
                await LoadSingleVideo();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task LoadPlaylistVideos()
    {
        var videos = await youtubeDownloader.GetPlayListVideosAsync(youtubeUrl);

        foreach (var v in videos)
        {
            if (IsVideoNotLoaded(v.Id))
            {
                playlistVideos.Add(v);
            }
        }
    }

    private async Task LoadSingleVideo()
    {
        var video = await youtubeDownloader.GetVideoAsync(youtubeUrl);
        if (IsVideoNotLoaded(video.Id))
        {
            videos.Add(video);
        }
    }

    private async Task DownloadVideo(string url)
    {
        try
        {
            errorMessage = "";
            showDialog = false;
            string path = string.IsNullOrWhiteSpace(customPath) ? selectedPath : customPath;

            await youtubeDownloader.DownloadVideoAsync(url, path, selectedExtension);
            await SaveStates();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DownloadAllVideos()
    {
        videoCancellationSource = new();
        var cancellationToken = videoCancellationSource.Token;

        foreach (var v in videos)
        {
            cancellationToken.ThrowIfCancellationRequested();

            await youtubeDownloader
                .DownloadVideoAsync(v.Url, selectedPath, selectedExtension);
        }
    }


    private async Task DownloadAllPlaylists()
    {
        playlistCancellationSource = new();
        var cancellationToken = playlistCancellationSource.Token;

        foreach (var v in playlistVideos)
        {
            cancellationToken.ThrowIfCancellationRequested();

            await youtubeDownloader
                .DownloadVideoAsync(v.Url, selectedPath, selectedExtension);
        }
    }

    private void CancelVideosDownload()
    {
        videoCancellationSource?.Cancel();
        videoCancellationSource = null;
    }

    private void CancelPlaylistDownload()
    {
        playlistCancellationSource?.Cancel();
        playlistCancellationSource = null;
    }

    private void ClearVideos()
    {
        videos.Clear();
    }

    private void ClearPlaylist()
    {
        playlistVideos.Clear();
    }

    private void LoadWatchPage(string url)
    {
        string encodedUrl = Uri.EscapeDataString(url);
        navManager.NavigateTo($"/Watch/{encodedUrl}");
    }

    private void ToggleDialog()
    {
        showDialog = !showDialog;
    }

    private string GetButtonClass(string path)
    {
        if (selectedPath == path)
        {
            return "text-success";
        }

        return "text-danger";
    }

    private string GetDownloadVideoText()
    {
        if (videos?.Count <= 0)
        {
            return "Download Video";
        }

        if (videos?.Count == 1)
        {
            return "Download 1 Video";
        }

        return $"Download {videos?.Count} videos";
    }

    private bool IsVideoNotLoaded(string videoId)
    {
        return videos.Any(v => v.Id == videoId) is false;
    }

    private bool IsPlaylistUrl()
    {
        return youtubeUrl.Contains("list=");
    }

    private int GetIndex(PlaylistVideo playlistVideo)
    {
        int index = playlistVideos.IndexOf(playlistVideo);
        return index + 1;
    }
}
