@page "/"
@inject IYoutubeDownloader youtubeDownloader
@inject ISecureStorage secureStorage
@inject IDefaultData defaultData
@inject IVideoLibrary videoLibrary
@inject ISettingsLibrary settingsLibrary
@inject ISnackbar snackbar
@inject NavigationManager navManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" Class="text-center text-uppercase mb-4">
        Vid Fetch
        <MudIcon Icon="@Icons.Custom.Brands.YouTube" Title="Video"></MudIcon>
    </MudText>
    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            @errorMessage
        </MudAlert>
    }
    <MudGrid>
        <MudItem xs="12" Class="text-center">
            <MudTextField @bind-Value="youtubeUrl"
                          Class="mb-4"
                          Label="Enter YouTube URL"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Download"
                          AdornmentColor="Color.Secondary"
                          OnAdornmentClick="LoadVideoOrPlaylist"
                          Required="true"
                          Clearable="true" />

            <MudButtonGroup Class="mt-2">
                @foreach (var p in downloadPaths)
                {
                    <MudButton Class="@GetButtonClass(p)"
                               OnClick="(() => selectedPath = p)">
                        @p
                    </MudButton>
                }
            </MudButtonGroup>
            <MudSelect Label="Video Format:" @bind-Value="selectedExtension" Class="mud-input-root text-start">
                @foreach (var e in videoExtensions)
                {
                    <MudSelectItem Value="@e">@e</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
    <MudGrid Spacing="5">
        <MudItem xs="6">
            @if (videosCancellationSource is null)
            {
                <MudButton Color="Color.Primary"
                           Variant="Variant.Filled"
                           Class="w-100 mb-4"
                @onclick="DownloadAllVideos">
                    @GetDownloadVideoText()
                </MudButton>
            }
            else
            {
                <MudButton Color="Color.Error"
                           Variant="Variant.Filled"
                           Class="w-100 mb-4"
                @onclick="CancelVideosDownload">
                    Cancel
                </MudButton>
            }
            <MudButton Color="Color.Warning"
                        Variant="Variant.Filled"
                        Class="w-100 mb-4"
            @onclick="ClearVideos">
                Clear Videos
            </MudButton>
            <MudAutocomplete T="string" Label="Search Video"
                Variant="Variant.Outlined"
                Class="mb-4"
                AdornmentIcon="@Icons.Material.Filled.YoutubeSearchedFor"
                OnAdornmentClick="FilterVideos"
                SearchFunc="SearchVideos"
                ResetValueOnEmptyText="true"
                @bind-Value="videoSearchText" />
            <MudProgressLinear Color="Color.Primary"
                               Striped="true"
                               Size="Size.Medium"
                               Max="1"
                               Value="@videosProgress"
                               Class="my-7" 
                               Buffer="true" />
            @if (string.IsNullOrWhiteSpace(currentDownloadingVideo) is false)
            {
                <MudAlert Class="mb-4" Severity="Severity.Warning">@currentDownloadingVideo</MudAlert>
            }
            <MudVirtualize Items="videoLibrary.Videos" Context="v" OverscanCount="10">
                <VideoComponent Model="v"
                                SelectedExtension="@selectedExtension"
                                SelectedPath="@selectedPath"/>
            </MudVirtualize>
        </MudItem>
        <MudItem xs="6">
            @if (playlistCancellationSource is null)
            {
                <MudButton Color="Color.Primary"
                           Variant="Variant.Filled"
                           Class="w-100 mb-4"
                @onclick="DownloadAllPlaylists">
                    Download Playlist
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled"
                           Color="Color.Error"
                           Class="w-100 mb-4"
                @onclick="CancelPlaylistDownload">
                    Cancel
                </MudButton>
            }
            <MudButton Color="Color.Warning"
                        Variant="Variant.Filled"
                        Class="w-100 mb-4"
            @onclick="ClearPlaylist">
                Clear Playlist
            </MudButton>
            <MudAutocomplete T="string" Label="Search Playlist Video"
                Variant="Variant.Outlined"
                Class="mb-4"
                AdornmentIcon="@Icons.Material.Filled.YoutubeSearchedFor"
                OnAdornmentClick="FilterPlaylistVideo"
                SearchFunc="SearchPlaylistVideos"
                ResetValueOnEmptyText="true"
                @bind-Value="playlistVideoSearchText" />
            <MudProgressLinear Color="Color.Primary"
                               Striped="true"
                               Size="Size.Medium"
                               Max="1"
                               Value="@playlistProgress"
                               Class="my-7" 
                               Buffer="true"/>
            @if (string.IsNullOrWhiteSpace(currentDownloadingPlaylistVideo) is false)
            {
                <MudAlert Class="mb-4" Severity="Severity.Warning">@currentDownloadingPlaylistVideo</MudAlert>
            }
            <MudVirtualize Items="videoLibrary.PlaylistVideos" Context="v" OverscanCount="10">
                <PlaylistVideoComponent Model="v"
                                        SelectedExtension="@selectedExtension"
                                        SelectedPath="@selectedPath"
                                        Index="@GetIndex(v)" />
            </MudVirtualize>
        </MudItem>
    </MudGrid>

    <MudDialog IsVisible="showDialog" Class="backdrop-blur">
        <DialogContent>
            <p>
                It appears your URL is a playlist.
            </p>
            <p>
                Would you like to download your video's Url?
            </p>
            <MudProgressLinear Color="Color.Primary"
                               Striped="true"
                               Size="Size.Medium"
                               Buffer="true" Max="1"
                               Value="@firstPlaylistProgress"
                               BufferValue="@((firstPlaylistProgress + 0.1))"
                               Class="my-7" />
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Primary" OnClick="(() => DownloadVideo(youtubeUrl))">Download</MudButton>
            <MudButton OnClick="ToggleDialog">Cancel</MudButton>
        </DialogActions>
    </MudDialog>
</MudContainer>

@code {
    private const string DefaultDownloadPath = "Download Folder";
    private const string DefaultExtension = ".mp4";

    private CancellationTokenSource playlistCancellationSource;
    private CancellationTokenSource videosCancellationSource;
    private CancellationTokenSource videoCancellationSource;
    private List<string> downloadPaths = new();
    private List<string> videoExtensions = new();
    private string selectedPath = DefaultDownloadPath;
    private string selectedExtension = DefaultExtension;
    private string youtubeUrl = "";
    private string errorMessage = "";
    private string videoSearchText = "";
    private string playlistVideoSearchText = "";
    private string currentDownloadingVideo = "";
    private string currentDownloadingPlaylistVideo = "";
    private double videosProgress = 0;
    private double playlistProgress = 0;
    private double firstPlaylistProgress = 0;
    private bool showDialog = false;

    protected override async Task OnInitializedAsync()
    {
        downloadPaths = defaultData.GetDownloadPaths();
        videoExtensions = defaultData.GetVideoExtensions();
        await LoadStates();
    }

    private async Task LoadStates()
    {
        selectedPath = await secureStorage.GetAsync(nameof(selectedPath)) ?? DefaultDownloadPath;
        selectedExtension = await secureStorage.GetAsync(nameof(selectedExtension)) ?? DefaultExtension;
    }

    private async Task SaveStates()
    {
        await secureStorage.SetAsync(nameof(selectedPath), selectedPath);
        await secureStorage.SetAsync(nameof(selectedExtension), selectedExtension);
    }

    private async Task LoadVideoOrPlaylist()
    {
        try
        {
            errorMessage = "";

            if (IsPlaylistUrl())
            {
                await LoadPlaylistVideos();
                showDialog = true;
            }
            else
            {
                await LoadSingleVideo();
            }

            youtubeUrl = "";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task LoadPlaylistVideos()
    {
        var videos = await youtubeDownloader.GetPlayListVideosAsync(youtubeUrl);

        foreach (var v in videos)
        {
            if (IsVideoNotLoaded(v.Id))
            {
                videoLibrary.PlaylistVideos.Add(v);
            }
        }
    }

    private async Task LoadSingleVideo()
    {
        var video = await youtubeDownloader.GetVideoAsync(youtubeUrl);
        if (IsVideoNotLoaded(video.Id))
        {
            videoLibrary.Videos.Add(video);
        }
    }

    private async Task DownloadVideo(string url)
    {
        try
        {
            errorMessage = "";
            showDialog = false;
            videoCancellationSource = new();

            var cancellationToken = videoCancellationSource.Token;

            var progressReport = new Progress<double>(value =>
            {
                UpdateProgress(ref firstPlaylistProgress, value);
            });

            await youtubeDownloader
            .DownloadVideoAsync(url, selectedPath, selectedExtension, progressReport, cancellationToken, settingsLibrary.DownloadSubtitles);

            CancelVideoDownload();
            await SaveStates();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task DownloadAllVideos()
    {
        videosCancellationSource = new();
        var cancellationToken = videosCancellationSource.Token;

        var progressReport = new Progress<double>(value =>
        {
            UpdateProgress(ref videosProgress, value);
        });

        foreach (var v in videoLibrary.Videos)
        {
            cancellationToken.ThrowIfCancellationRequested();
            currentDownloadingVideo = v.Title;

            await youtubeDownloader
                .DownloadVideoAsync(v.Url, selectedPath, selectedExtension, progressReport, cancellationToken, settingsLibrary.DownloadSubtitles);

            AddSnackbar(v.Title);
        }

        currentDownloadingVideo = "";
        CancelVideosDownload();
        await SaveStates();
    }

    private async Task DownloadAllPlaylists()
    {
        playlistCancellationSource = new();
        var cancellationToken = playlistCancellationSource.Token;

        var progressReport = new Progress<double>(value =>
        {
            UpdateProgress(ref playlistProgress, value);
        });

        foreach (var v in videoLibrary.PlaylistVideos)
        {
            cancellationToken.ThrowIfCancellationRequested();
            currentDownloadingPlaylistVideo = v.Title;

            await youtubeDownloader
                .DownloadVideoAsync(v.Url, selectedPath, selectedExtension, progressReport, cancellationToken, settingsLibrary.DownloadSubtitles);

            AddSnackbar(v.Title);
        }

        currentDownloadingPlaylistVideo = "";
        CancelPlaylistDownload();
        await SaveStates();
    }

    private async Task<IEnumerable<string>> SearchPlaylistVideos(string searchInput)
    {
        return await Task.Run(() =>
        {
            playlistVideoSearchText = searchInput;
            var output = videoLibrary.PlaylistVideos;
            if (string.IsNullOrWhiteSpace(searchInput) is false)
            {
                output = output
                .Where(v => v.Title
                .Contains(searchInput, StringComparison.InvariantCultureIgnoreCase)).ToList();
            }

            return output.Select(v => v.Title);
        });
    }

    private void FilterPlaylistVideo()
    {
        var output = videoLibrary.PlaylistVideos;

        if (string.IsNullOrWhiteSpace(playlistVideoSearchText) is false)
        {
            output = output
                .OrderByDescending(v => v.Title.Contains(playlistVideoSearchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        videoLibrary.PlaylistVideos = output;
    }

    private async Task<IEnumerable<string>> SearchVideos(string searchInput)
    {
        return await Task.Run(() =>
        {
            videoSearchText = searchInput;
            var output = videoLibrary.Videos;
            if (string.IsNullOrWhiteSpace(searchInput) is false)
            {
                output = output
                .Where(v => v.Title
                .Contains(searchInput, StringComparison.InvariantCultureIgnoreCase)).ToList();
            }

            return output.Select(v => v.Title);
        });
    }

    private void AddSnackbar(string title)
    {
        snackbar.Add($"Successfully downloaded {title}", Severity.Normal);
    }

    private void FilterVideos()
    {
        var output = videoLibrary.Videos;

        if (string.IsNullOrWhiteSpace(videoSearchText) is false)
        {
            output = output
                .OrderByDescending(v => v.Title.Contains(videoSearchText, StringComparison.InvariantCultureIgnoreCase))
                .ToList();
        }

        videoLibrary.Videos = output;
    }

    private void CancelVideosDownload()
    {
        videosCancellationSource?.Cancel();
        videosCancellationSource = null;
    }

    private void CancelVideoDownload()
    {
        videoCancellationSource?.Cancel();
        videoCancellationSource = null;
    }

    private void CancelPlaylistDownload()
    {
        playlistCancellationSource?.Cancel();
        playlistCancellationSource = null;
    }

    private void ClearVideos()
    {
        videoLibrary.Videos.Clear();
        videosProgress = 0;
    }

    private void ClearPlaylist()
    {
        videoLibrary.PlaylistVideos.Clear();
        playlistProgress = 0;
    }

    private void ToggleDialog()
    {
        showDialog = !showDialog;
    }

    private void UpdateProgress(ref double progressVariable, double value)
    {
        progressVariable = value;
        StateHasChanged();
    }

    private string GetButtonClass(string path)
    {
        if (selectedPath == path)
        {
            return "text-success";
        }

        return "text-danger";
    }

    private string GetDownloadVideoText()
    {
        if (videoLibrary.Videos?.Count <= 0)
        {
            return "Download Video";
        }

        if (videoLibrary.Videos?.Count == 1)
        {
            return "Download 1 Video";
        }

        return $"Download {videoLibrary.Videos?.Count} videos";
    }

    private bool IsVideoNotLoaded(string videoId)
    {
        return videoLibrary.Videos.Any(v => v.Id == videoId) is false;
    }

    private bool IsPlaylistUrl()
    {
        return youtubeUrl.Contains("list=");
    }

    private int GetIndex(PlaylistVideo playlistVideo)
    {
        int index = videoLibrary.PlaylistVideos.IndexOf(playlistVideo);
        return index + 1;
    }
}
