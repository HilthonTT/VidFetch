@page "/SavedMedia"
@inject IYoutubeDownloader youtubeDownloader
@inject IDefaultData defaultData
@inject ISecureStorage secureStorage
@inject IVideoData videoData
@inject ISettingsLibrary settingsLibrary
@inject ISnackbar snackbar

@code {
    private const string DefaultDownloadPath = "Download Folder";
    private const string DefaultExtension = ".mp4";

    private CancellationTokenSource tokenSource;
    private List<VideoModel> videos = new();
    private List<string> downloadPaths = new();
    private List<string> videoExtensions = new();
    private string selectedPath = DefaultDownloadPath;
    private string selectedExtension = DefaultExtension;
    private string searchText = "";
    private string currentDownloadingVideo = "";
    private double downloadProgress = 0;

    protected override async Task OnInitializedAsync()
    {
        downloadPaths = defaultData.GetDownloadPaths();
        videoExtensions = defaultData.GetVideoExtensions();
        videos = await videoData.GetAllVideosAsync();
        await LoadStates();
    }

    private async Task LoadStates()
    {
        selectedPath = await secureStorage.GetAsync(nameof(selectedPath)) ?? DefaultDownloadPath;
        selectedExtension = await secureStorage.GetAsync(nameof(selectedExtension)) ?? DefaultExtension;
    }

    private async Task SaveStates()
    {
        await secureStorage.SetAsync(nameof(selectedPath), selectedPath);
        await secureStorage.SetAsync(nameof(selectedExtension), selectedExtension);
    }

    private async Task DownloadAllVideos()
    {
        tokenSource = new();
        var cancellationToken = tokenSource.Token;

        var progressReport = new Progress<double>(value =>
        {
            UpdateProgress(ref downloadProgress, value);
        });

        foreach (var v in videos)
        {
            cancellationToken.ThrowIfCancellationRequested();
            currentDownloadingVideo = v.Title;

            await youtubeDownloader.DownloadVideoAsync(v.Url, selectedPath, selectedExtension, progressReport, cancellationToken, settingsLibrary.DownloadSubtitles);
            AddSnackbar(v.Title);
        }

        currentDownloadingVideo = "";
        CancelVideosDownload();
        await SaveStates();
    }

    private void AddSnackbar(string title)
    {
        snackbar.Add($"Successfully downloaded {title}", Severity.Normal);
    }

    private void UpdateProgress(ref double progressVariable, double value)
    {
        progressVariable = value;
        StateHasChanged();
    }

    private void CancelVideosDownload()
    {
        tokenSource?.Cancel();
        tokenSource = null;
    }
}
