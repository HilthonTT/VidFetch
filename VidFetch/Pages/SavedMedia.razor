@page "/SavedMedias"
@inject IYoutubeDownloader youtubeDownloader
@inject IDefaultData defaultData
@inject IVideoData videoData
@inject ISettingsLibrary settingsLibrary
@inject ISecureStorage secureStorage
@inject ISnackbar snackbar
@inject ISearchHelper searchHelper
@inject ITokenHelper tokenHelper
@inject IFolderHelper folderHelper

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" Class="text-center text-uppercase mb-4">
        Saved Medias
        <MudIcon Icon="@Icons.Material.Filled.PersonalVideo"></MudIcon>
    </MudText>
    @if (string.IsNullOrWhiteSpace(errorMessage) is false)
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            @errorMessage
        </MudAlert>
    }
    <MudGrid Spacing="5">
        <MudItem xs="12" Class="text-center">
            <MudButtonGroup Class="mt-2">
                @foreach (var p in downloadPaths)
                {
                    <MudButton Class="@GetButtonClass(p)"
                               OnClick="(() => OnButtonClick(p))">
                        @p
                    </MudButton>
                }
            </MudButtonGroup>
            <MudSelect Label="Video Format:"
                       @bind-Value="selectedExtension"
                       Class="mud-input-root text-start"
                       HelperText="Pick your preferred format.">
                @foreach (var e in videoExtensions)
                {
                    <MudSelectItem Value="@e" OnClick="SaveStates">@e</MudSelectItem>
                }
            </MudSelect>
            <MudButton Class="mt-4 w-100"
                       Color="Color.Warning"
                       Variant="Variant.Outlined"
            @onclick="OpenFileLocation">
                Open Folder Location
            </MudButton>
        </MudItem>
    </MudGrid>
    <MudGrid Spacing="5">
        <MudItem xs="12">
            @if (allVideosTokenSource is null)
            {
                <MudButton Color="Color.Primary"
                           Variant="Variant.Filled"
                           Class="w-100 mb-4"
                @onclick="DownloadAll">
                    @GetDownloadVideoText()
                </MudButton>
            }
            else
            {
                <MudButton Color="Color.Error"
                           Variant="Variant.Filled"
                           Class="w-100 mb-4"
                @onclick="CancelDownload">
                    Cancel
                </MudButton>
            }
            <MudAutocomplete T="string" Label="@GetVideoSearchBarText()"
                             Variant="Variant.Outlined"
                             Class="mb-4"
                             AdornmentIcon="@Icons.Material.Filled.YoutubeSearchedFor"
                             OnAdornmentClick="FilterVideos"
                             SearchFunc="SearchVideos"
                             ResetValueOnEmptyText="true"
            @bind-Value="searchText" />
            <MudProgressLinear Color="Color.Primary"
                               Striped="true"
                               Size="Size.Medium"
                               Max="1"
                               Value="@videosProgress"
                               Class="my-7"
                               Buffer="true" />
            @if (string.IsNullOrWhiteSpace(currentDownloadingVideo) is false)
            {
                <MudAlert Class="mb-4" Severity="Severity.Warning">@currentDownloadingVideo</MudAlert>
            }
            @if (isVideosLoading)
            {
                <div class="text-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </div>
            }
            <MudGrid>
                <MudVirtualize Items="videos" Context="v" OverscanCount="10">
                    <VideoComponent 
                        @key="v.Id" 
                        Url="@v.Url"
                        CardSize="6"
                        SelectedExtension="@selectedExtension"
                        SelectedPath="@selectedPath"
                        RemoveEvent="DeleteVideo"/>
                </MudVirtualize>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private const string DefaultDownloadPath = "Download Folder";
    private const string DefaultExtension = ".mp4";
    private CancellationTokenSource allVideosTokenSource;
    private List<VideoModel> videos = new();
    private List<string> downloadPaths = new();
    private List<string> videoExtensions = new();
    private string selectedPath = DefaultDownloadPath;
    private string selectedExtension = DefaultExtension;
    private string searchText = "";
    private string errorMessage = "";
    private string currentDownloadingVideo = "";
    private double videosProgress = 0;
    private bool isVideosLoading = true;

    protected override async Task OnInitializedAsync()
    {
        LoadPathsAndExtensions();
        await LoadVideos();
        await LoadStates();
    }

    private void LoadPathsAndExtensions()
    {
        downloadPaths = defaultData.GetDownloadPaths();
        videoExtensions = defaultData.GetVideoExtensions();
    }

    private async Task LoadVideos()
    {
        videos = await videoData.GetAllVideosAsync();
        isVideosLoading = false;
    }

    private async Task LoadStates()
    {
        selectedPath = await secureStorage.GetAsync(nameof(selectedPath)) ?? DefaultDownloadPath;
        selectedExtension = await secureStorage.GetAsync(nameof(selectedExtension)) ?? DefaultExtension;
    }

    private async Task SaveStates()
    {
        await secureStorage.SetAsync(nameof(selectedPath), selectedPath);
        await secureStorage.SetAsync(nameof(selectedExtension), selectedExtension);
    }

    private async Task DownloadAll()
    {
        if (videos?.Count <= 0)
        {
            errorMessage = "No videos are available.";
            return;
        }

        try
        {
            errorMessage = "";
            var cancellationToken = tokenHelper.InitializeToken(ref allVideosTokenSource);

            var progressReport = new Progress<double>(value =>
            {
                UpdateProgress(ref videosProgress, value);
            });

            foreach (var v in videos)
            {
                cancellationToken.ThrowIfCancellationRequested();
                currentDownloadingVideo = v.Title;

                await youtubeDownloader.DownloadVideoAsync(
                    v.Url, 
                    selectedPath, 
                    selectedExtension, 
                    progressReport, 
                    cancellationToken, 
                    settingsLibrary.DownloadSubtitles);

                AddSnackbar(v.Title);
            }

            currentDownloadingVideo = "";
            CancelDownload();
            await SaveStates();
        }
        catch (Exception ex)
        {
            errorMessage = $"There was an issue downloading your videos: {ex.Message}";
        }
    }

    private async Task DeleteVideo(Video video)
    {
        var v = videos.FirstOrDefault(v => v.VideoId == video.Id || v.Url == video.Url);

        videos.Remove(v);
        await videoData.DeleteAsync(v);
    }

    private async Task<IEnumerable<string>> SearchVideos(string searchInput)
    {
        return await searchHelper.SearchAsync(videos, searchInput);
    }

    private async Task OnButtonClick(string path)
    {
        selectedPath = path;
        await SaveStates();
    }

    private async Task OpenFileLocation()
    {
        if (string.IsNullOrWhiteSpace(selectedPath))
        {
            return;
        }

        await folderHelper.OpenFolderLocationAsync(selectedPath);
    }

    private void FilterVideos()
    {
        videos = searchHelper.FilterList(videos, searchText);
    }

    private void AddSnackbar(string title)
    {
        snackbar.Add($"Successfully downloaded {title}", Severity.Normal);
    }

    private void UpdateProgress(ref double progressVariable, double value)
    {
        progressVariable = value;
        StateHasChanged();
    }

    private void CancelDownload()
    {
        tokenHelper.CancelRequest(ref allVideosTokenSource);
        videosProgress = 0;
        currentDownloadingVideo = "";
    }

    private string GetButtonClass(string path)
    {
        if (selectedPath == path)
        {
            return "text-success";
        }

        return "text-danger";
    }

    private string GetDownloadVideoText()
    {
        if (videos?.Count <= 0)
        {
            return "Download Video";
        }

        if (videos?.Count == 1)
        {
            return "Download 1 Video";
        }

        return $"Download {videos?.Count} Videos";
    }

    private string GetVideoSearchBarText()
    {
        if (videos?.Count <= 0)
        {
            return "Search Video";
        }

        if (videos?.Count == 1)
        {
            return "Search 1 Video";
        }

        return $"Search {videos?.Count} Videos";
    }
}
