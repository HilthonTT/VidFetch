@inject IYoutubeDownloader youtubeDownloader
@inject NavigationManager navManager

<MudCard Class="mb-4">
    <MudCardMedia Image="@Model.Thumbnails.FirstOrDefault().Url" Height="200"></MudCardMedia>
    <MudCardHeader>
        <MudText Typo="Typo.subtitle1">@Model.Title</MudText>
    </MudCardHeader>
    <MudDivider />
    <MudCardContent Class="text-start">
        <div>@Model.Author</div>
        <div>@Model.Duration</div>
        <div>@Model.Url</div>
        <div>Index: @Index</div>
        <MudProgressLinear Color="Color.Primary"
                           Striped="true"
                           Size="Size.Medium"
                           Max="1"
                           Value="@progress"
                           Class="my-7" />
    </MudCardContent>
    <MudCardActions Class="justify-content-between">
        @if (isDownloading is false)
        {
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
            @onclick="DownloadVideo">
                Download
            </MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Filled"
                       Color="Color.Error"
            @onclick="CancelVideoDownload">
                Cancel Download
            </MudButton>
        }
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Secondary"
        @onclick="LoadWatchPage">
            Watch
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    [EditorRequired]
    public PlaylistVideo Model { get; set; }

    [Parameter]
    [EditorRequired]
    public string SelectedExtension { get; set; }

    [Parameter]
    [EditorRequired]
    public string SelectedPath { get; set; }

    [Parameter]
    [EditorRequired]
    public string CustomPath { get; set; }

    [Parameter]
    [EditorRequired]
    public int Index { get; set; }

    private Random rnd = new();
    private bool isDownloading = false;
    private double progress = 0;
    private CancellationTokenSource tokenSource;

    private async Task DownloadVideo()
    {
        tokenSource = new();
        isDownloading = true;

        var progressReporter = new Progress<double>(value =>
        {
            progress = value;
            StateHasChanged();
        });

        var cancellationToken = tokenSource.Token;
        string path = string.IsNullOrWhiteSpace(CustomPath) ? SelectedPath : CustomPath;

        await youtubeDownloader.DownloadVideoAsync(Model.Url, path, SelectedExtension, progressReporter, cancellationToken);
        CancelVideoDownload();
    }

    private void CancelVideoDownload()
    {
        tokenSource?.Cancel();
        tokenSource = null;
        isDownloading = false;
    }

    private void LoadWatchPage()
    {
        string encodedUrl = Uri.EscapeDataString(Model.Url);
        navManager.NavigateTo($"/Watch/{encodedUrl}");
    }
}
