@inject IPlaylistData playlistData
@inject ISnackbar snackbar
@inject IYoutube youtube
@inject NavigationManager navManager

<MudItem xs="CardSize">
    <MudCard Class="mb-4">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar>
                    <MudImage title="@Playlist.AuthorName" Src="@Playlist.AuthorThumbnailUrl"></MudImage>
                </MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.subtitle1" title="@Playlist.Title">@Playlist.Title</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                @if (isSaved is false)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Save"
                                   Color="Color.Default"
                                   Title="Save Playlist"
                    @onclick="SavePlaylist"></MudIconButton>
                }
                <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline"
                               Color="Color.Default"
                               Title="Remove"
                @onclick="Remove"></MudIconButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardMedia Image="@Playlist.ThumbnailUrl" Height="200"></MudCardMedia>
        <MudCardContent Class="text-start">
            <MudLink Typo="Typo.h5" Color="Color.Default" title="@Playlist.Title" @onclick="(() => OpenUrl(Playlist.Url))">
                @Playlist.Title
            </MudLink>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="LoadPlaylistPage">
                Open Details
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudItem>

@code {
    [Parameter]
    [EditorRequired]
    public PlaylistModel Playlist { get; set; }

    [Parameter]
    public int CardSize { get; set; } = 12;

    [Parameter]
    [EditorRequired]
    public string SelectedExtension { get; set; }

    [Parameter]
    [EditorRequired]
    public string SelectedPath { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback<PlaylistModel> RemoveEvent { get; set; }

    private bool isSaved = false;

    protected override async Task OnInitializedAsync()
    {
        isSaved = await playlistData.PlaylistExistsAsync(Playlist.Url, Playlist.PlaylistId);
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadNullData();
    }

    private async Task SavePlaylist()
    {
        if (isSaved is false)
        {
            await playlistData.SetPlaylistAsync(Playlist.Url, Playlist.PlaylistId);
            snackbar.Add($"Successfully saved {Playlist.Title}");
            isSaved = true;
        }
    }

    private async Task LoadNullData()
    {
        bool isThumbnailEmpty = string.IsNullOrWhiteSpace(Playlist.ThumbnailUrl);
        bool isAuthorThumbnailEmpty = string.IsNullOrWhiteSpace(Playlist.AuthorThumbnailUrl);
        string defaultUrl = "https://dummyimage.com/1200x900/000/ffffff&text=No+image+available.";

        if (isThumbnailEmpty)
        {
            var playlist = await youtube.GetPlaylistAsync(Playlist.Url);
            string playlistThumbnail = playlist.Thumbnails?.Count > 0 ? playlist.Thumbnails[0].Url : defaultUrl;
            Playlist.ThumbnailUrl = playlistThumbnail;
        }

        if (isAuthorThumbnailEmpty)
        {
            var channel = await youtube.GetChannelAsync(Playlist.AuthorUrl);
            string channelThumbnail = channel.Thumbnails?.Count > 0 ? channel.Thumbnails[0].Url : defaultUrl;
            Playlist.AuthorThumbnailUrl = channelThumbnail;
        }
    }

    private async Task Remove()
    {
        await RemoveEvent.InvokeAsync(Playlist);
    }

    private static async Task OpenUrl(string text)
    {
        await Launcher.OpenAsync(text);
    }

    private void LoadPlaylistPage()
    {
        string encodedUrl = Uri.EscapeDataString(Playlist.Url);
        navManager.NavigateTo($"/Playlist/{encodedUrl}");
    }
}
